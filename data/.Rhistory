fit1 <- lm(mpg ~ am_desc, data = mtcars)
fit3 <- update(fit, mpg ~ am_desc+cyl)
fit5 <- update(fit, mpg ~ am_desc+cyl+gear)
anova(fit1, fit3, fit5)
fit <- lm(mpg ~ factor(am) + factor(cyl), data=mtcars)
par(mfrow=c(2,2))
plot(mtcars$am,residuals(fit),xlab="am_desc")
plot(mtcars$cyl,residuals(fit),xlab="cyl")
plot(predict(fit), resid(fit), pch = '.')
fit1<-lm(mpg ~  factor(am_desc), data = mtcars)
fit2<-lm(mpg ~  factor(am_desc)+factor(cyl), data = mtcars)
plot(predict(fit1), resid(fit), pch = '.',xlab="am")
plot(predict(fit2), resid(fit), pch = '.',xlab="am and cyl")
fit1<-lm(mpg ~  factor(am_desc), data = mtcars)
fit2<-lm(mpg ~  factor(am_desc)+factor(cyl), data = mtcars)
plot(predict(fit1), resid(fit), pch = '.',xlab="am")
plot(predict(fit2), resid(fit), pch = '.',xlab="am and cyl")
summary(lm(mpg ~  factor(am_desc), data = mtcars))$coefficient
summary(lm(mpg ~  factor(am_desc)+factor(cyl), data = mtcars))$coefficient
plot(density(resid(fit1))) #A density plot
plot(density(resid(fit2)))
qqnorm(resid(fit1))
qqnorm(resid(fit2))
plot<-ggplot(data.frame(x1=mtcars$am_desc,x2=mtcars$cyl,y=mtcars$mpg),aes(x=x1,y=y,colour=x2))
plot1<-plot+geom_violin()
plot1
plot<-ggplot(data.frame(x=mtcars$am_desc,y=mtcars$mpg),aes(x=x,y=y))
plot1<-plot+geom_violin()
plot1
plot<-ggplot(data.frame(x=mtcars$am_desc,y=mtcars$mpg),aes(x=x,y=y),xlab="Auto_manual", ylab="MPG")
plot1<-plot+geom_violin()
plot1
plot1
plot
plot<-ggplot(data.frame(x=mtcars$am_desc,y=mtcars$mpg),aes(x=x,y=y),xlab="Auto_manual", ylab="MPG")
plot1<-plot+geom_violin()
plot1
plot
plot1<-plot+geom_violin(xlab="Auto_manual", ylab="MPG")
plot1
par(mfrow=c(2,2))
plot(density(resid(fit1)))
plot(density(resid(fit2)))
qqnorm(resid(fit1))
qqnorm(resid(fit2))
legend("topright", c("fit1-am", "fit2-am+cyl"),  lwd=2.5)
par(mfrow=c(2,2))
plot(density(resid(fit1)))
plot(density(resid(fit2)))
qqnorm(resid(fit1))
qqnorm(resid(fit2))
legend("topright", c("fit1-am", "fit2-am+cyl"))
par(mfrow=c(2,2))
plot(density(resid(fit1)))
legend("topright", c("fit1-am", "fit2-am+cyl"))
plot(density(resid(fit2)))
legend("topright", c("fit1-am", "fit2-am+cyl"))
qqnorm(resid(fit1))
legend("topright", c("fit1-am"))
qqnorm(resid(fit2))
legend("topright", c("fit2-am+cyl"))
par(mfrow=c(2,2))
plot(density(resid(fit1)))
legend("topright", c("fit1-am", "fit2-am+cyl"))
plot(density(resid(fit2)))
legend("topright", c("fit1-am", "fit2-am+cyl"))
qqnorm(resid(fit1))
legend("bottomright", c("fit1-am"))
qqnorm(resid(fit2))
legend("bottomright", c("fit2-am+cyl"))
par(mfrow=c(2,2))
plot(density(resid(fit1)))
legend("topright", c("mpg~am"))
plot(density(resid(fit2)))
legend("topright", c("mpg~am+cyl"))
qqnorm(resid(fit1))
legend("bottomright", c("mpg~am"))
qqnorm(resid(fit2))
legend("bottomright", c("mpg~am+cyl"))
plot<-ggplot(data.frame(x=mtcars$am_desc,y=mtcars$mpg),aes(x=x,y=y),xlab="Auto_manual", ylab="MPG")
plot1<-plot+geom_violin(xlab="Auto_manual", ylab="MPG")
plot1
title("mpg by Auto/Manual"))
library(ggplot2)
#plot<-ggplot(data.frame(x1=mtcars$am_desc,x2=mtcars$cyl,y=mtcars$mpg),aes(x=x1,y=y,colour=x2))
plot<-ggplot(data.frame(x=mtcars$am_desc,y=mtcars$mpg),aes(x=x,y=y),xlab="Auto_manual", ylab="MPG")
plot1<-plot+geom_violin(xlab="Auto_manual", ylab="MPG")
plot1
title("mpg by Auto/Manual"
title(c("mpg by Auto/Manual"))
?shuttle
data(shuttles)
data(shuttle)
head(mtcars)
library(mass)
library(MASS)
data(shuttle)
?shuttle
names(shuttle)
table(use)
table(shuttle$use)
glm(shuttle$use~shuttle$wind,family=binomial)
shuttleglm<-glm(shuttle$use~shuttle$wind,family=binomial)
summary(shuttleglm)
shuttleglm<-glm(shuttle$use~shuttle$wind,family="binomial")
summary(shuttleglm)
exp(shuttleglm$coeff)
shuttleglm<-glm(shuttle$use~shuttle$wind+shuttle$magn,family="binomial")
summary(shuttleglm)
exp(shuttleglm$coeff)
shuttleglm<-glm(1-shuttle$use~shuttle$wind,family="binomial")
summary(shuttleglm)
exp(shuttleglm$coeff)
data(InsectSprays)
?InsectSprays
nambes(InsectSprays)
names(InsectSprays)
glm_poison<-glm(InsectSprays$count~InsectSprays$spray, family="poisson")
summary(glm_poison)
glm_poison<-glm(InsectSprays$count~factor(InsectSprays$spray), family="poisson")
summary(glm_poison)
exp(glm_poison$coeff)
1/1.057
log(10)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
knot <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xmat<-cbind(1,x,splineTerms)
fit<-lm(y~xmat-1)
yhat<-predict(fit)
summary(fit)$coef
plot(x,y)
yhat
mean(yhat[yhat>0])
xmat
mean(yhat[x>0])
mean(y[x>0])
summary(fit)$coef[x>0]
mean(summary(fit)$coef[x>0])
mean(summary(fit)$coef)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)$coef
summary(fit)$coef[x>=0]
diff(y)/diff(x)
dir
wd
options('download.file.method'='curl')
download.file(url="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile ="./data/pml-training.csv")
dir <- "C:/Users/lwakjira/Documents/fy16 training/Data Science/PracticalMachineLearning"
download.file(url='https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv', destfile ='./data/pml-testing.csv', method='curl')
install.packages("downloader")
dir <- "C:/Users/lwakjira/Documents/fy16 training/Data Science/PracticalMachineLearning"
download.file(url="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile ="./data/pml-training.csv")
download.file(url='https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv', destfile ='./data/pml-testing.csv')
list.files("./data")
dir <- "C:/Users/lwakjira/Documents/fy16 training/Data Science/PracticalMachineLearning"
download.file(url="https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile ="./data/pml-training.csv")
download.file(url='https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv', destfile ='./data/pml-testing.csv')
list.files("./data")
dir
list.files("./data")
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
library(UsingR)
myPlot
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, 5)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
require(rCharts)
install.packages("rCharts")
require(rCharts)
library(rCharts)
install.packages("slidify")
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
require(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)  ),
mainPanel(
plotOutput('newHist')
)
))
install.packages("Shiny")
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)  ),
mainPanel(
plotOutput('newHist')
)
))
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})      }
)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})      }
)
library("galton")
data(galton)
install.packages("galton")
library(AppliedPredictiveModeling)
data(galton)
library(UsingR)
install.packages("UsingR")
library(UsingR)
library(AppliedPredictiveModeling)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})      }
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)  ),
mainPanel(
plotOutput('newHist')
)
))
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
input
output
output$myHist
input$mu
package.skeleton()
q()
install.packages(c('ggplot2', 'shiny'))
install.packages("devtools")
library(devtools)
devtools::install_github('rstudio/shinyapps')
dir<-"C:/Users/lwakjira/Documents/fy16 training/Data Science/shiny"
setwd(dir)
#shinyapps::setAccountInfo(name='myfirstappfromr', token='4B9EB89BDBDEA06D02FEEC2319417881', secret='n266zKIwG3K437dMDJSuyfKKzxrgLIvb9Ep5IydN')
shinyapps::setAccountInfo(name='testcalc', token='4B9EB89BDBDEA06D02FEEC2319417881', secret='n266zKIwG3K437dMDJSuyfKKzxrgLIvb9Ep5IydN')
library(shinyapps)
shinyapps::deployApp(account='testcalc')
shiny::runApp('fy16 training/DataScience/shiny')
head(women)
plot(women, xlab = "Height (in)", ylab = "Weight (lb)",
main = "women data: American women aged 30-39")
require(grDevices); require(graphics)
filled.contour(volcano, color.palette = terrain.colors, asp = 1)
title(main = "volcano data: filled contour map")
require(graphics)
pairs(airquality, panel = panel.smooth, main = "airquality data")
pm25 <- readRDS("./emission/summarySCC_PM25.rds")
dir<-"C:/Users/lwakjira/Documents/fy16 training/Data Science/shiny"
setwd(dir)
pm25 <- readRDS("./emission/summarySCC_PM25.rds")
pm25 <- readRDS("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny/emission/summarySCC_PM25.rds")
head(pm25)
fips$county<-fipscounty(cod=pm25$fips)
library(fipscounty)
installed.packages("fipscounty")
library(fipscounty)
install.packages("fipscounty")
?fipscounty
get("http://upwell.pfeg.noaa.gov/erddap/")
GET("http://upwell.pfeg.noaa.gov/erddap/")
ClassCd <- readRDS("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny/emission/Source_Classification_Code.rds")
head(ClassCd)
names(ClassCd)
fipscounty(code = "06053")
install.packages("CRAN")
fipscounty <- function(county = NULL, code = NULL, url = eurl(), ...){
either_or_fips(county, code)
args <- rc(list(county = county, code = code))
res <- GET(paste0(pu(url), '/convert/fipscounty.txt'), query = args, ...)
stop_for_status(res)
content(res, "text")
}
fipscounty(code="06053")
names(cars)
names(uspop)
names(USPersonalExpenditure)
library(MASS)
library(MASS)
names(USPersonalExpenditure)
data()
head(road)
?road
?wtloss
head(shrimp)
?shrimp
?Insurance
loglm(Claims ~ District + Group + Age + offset(log(Holders)),
data = Insurance)
glm(Claims ~ District + Group + Age + offset(log(Holders)),
data = Insurance, family = poisson)
?DDT
head(DDT)
?women
head(women)
?read.csv
ed_levl<-read.csv("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny/data/USEdLevelbyState.csv",sep=",")
head(ed_levl)
as.list(ed_levl$State)
output$choose_state <- renderUI({
selectInput("state", "Select State", as.list(ed_levl$State))
names(ed_levl)
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
as.list(ed_levl$State)
test<-as.list(ed_levl$State)
test
head(test)
?as.list
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
ed_levl$High.school.graduate.or.more[ed_levl$State==output$oState]
output$oState
shiny::runApp('fy16 training/DataScience/shiny')
ed_levl$High.school.graduate.or.more[ed_levl$State==input$State]
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
?subset
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
ed_levl$State
names(ed_levl)
shiny::runApp('fy16 training/DataScience/shiny')
shiny::runApp('fy16 training/DataScience/shiny')
names(ed_levl)
shiny::runApp('fy16 training/DataScience/shiny')
summary(ed_levl)
ed_levl(ed_levl$state=="VA")
ed_levl(ed_levl$State=="VA")
ed_levl(State=="VA")
ed_levl$[ed_levl$State=="VA"])
ed_levl$[ed_levl$State=="VA"]
ed_levl[ed_levl$State=="VA"]
print(ed_levl[ed_levl$State=="VA",])
head(ed_levl)
```
Coursera Developing Data Products-Shiny App
Level
========================================================
author: L W
date: `r date()`
First Slide
========================================================
The Shiny App displays Education Attainment Level for the State you Select
- First you select your education level
- Second you select your State [only focusin on US]
- The app then extracts the attainment level for 2009 census data
Slide With Code
========================================================
```{r}
head(ed_levl)
```
Slide With result
========================================================
```{r, echo=FALSE}
head(ed_levl)
```
Coursera Developing Data Products-Shiny App
========================================================
author: L W
date: `r date()`
First Slide
========================================================
The Shiny App displays Education Attainment Level for the State you Select
- First you select your education level
- Second you select your State [only focusin on US]
- The app then extracts the attainment level for 2009 census data
Slide With Code
========================================================
```r
summary(ed_levl)
```
```
State      State.Abbr High.school.graduate.or.more Bachelor.s.degree.or.more Advanced.degree.or.more
: 1          : 5   Min.   :79.90                Min.   :17.30             Min.   : 6.10
United States: 1   AK     : 1   1st Qu.:84.12                1st Qu.:24.25             1st Qu.: 8.05
Alabama          : 1   AL     : 1   Median :87.40                Median :26.55             Median : 9.35
Alaska           : 1   AR     : 1   Mean   :86.85                Mean   :27.60             Mean   :10.15
Arizona          : 1   AZ     : 1   3rd Qu.:89.80                3rd Qu.:30.52             3rd Qu.:11.12
Arkansas         : 1   CA     : 1   Max.   :91.80                Max.   :48.50             Max.   :28.00
(Other)          :51   (Other):47   NA's   :5                    NA's   :5                 NA's   :5
```
Slide with information for selected State
========================================================
```
State State.Abbr High.school.graduate.or.more Bachelor.s.degree.or.more Advanced.degree.or.more
3            Alaska         AK                         91.4                      26.6                     9.0
```
Coursera Developing Data Products-Shiny App
Level
========================================================
author: L W
date: `r date()`
First Slide
========================================================
The Shiny App displays Education Attainment Level for the State you Select
- First you select your education level
- Second you select your State [only focusin on US]
- The app then extracts the attainment level for 2009 census data
Slide With Code
========================================================
```{r}
head(ed_levl)
```
Slide With result
========================================================
```{r, echo=FALSE}
head(ed_levl)
```
Coursera Developing Data Products-Shiny App
Level
========================================================
author: L W
date: `r date()`
First Slide
========================================================
Coursera Developing Data Products
Level
Coursera Developing Data Products
Coursera Developing Data Products
===
View(pm25)
source('~/.active-rstudio-document', echo=TRUE)
View(fipscounty)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(ed_levl)
ed_levl<-read.csv("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny/data/USEdLevelbyState.csv",sep=",")
setwd("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny")
setwd("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny/")
setwd("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny")
ed_levl<-read.csv("data/USEdLevelbyState.csv",sep=",")
setwd("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny")
setwd("C:\Users\lwakjira\Documents\fy16 training\DataScience\shiny")
setwd('C:\Users\lwakjira\Documents\fy16 training\DataScience\shiny')
setwd("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny")
setwd("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny/data")
setwd("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny/data/")
setwd("C:/Users/lwakjira/Documents/fy16 training/DataScience/shiny/data")
getwd()
dir()
read.csv("USEdLevelbyState.csv",sep=",")
ed_levl<-read.csv("USEdLevelbyState.csv",sep=",")
head(ed_levl)
